# -*- coding: utf-8 -*-
"""predictive-analytics.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1G00nIPm-mFVdQyizgZ-n_DIoD_17pT96

#**Predictive Analytics: Harga Rumah**
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import math
import seaborn as sns
sns.set(style='darkgrid',font_scale=1.5)
import plotly.express as px
import plotly.graph_objects as go
from plotly.subplots import make_subplots

#Data Preparation
from sklearn.preprocessing import LabelEncoder
from sklearn.preprocessing import MinMaxScaler

# Modeling eval
from sklearn.linear_model import LinearRegression
from sklearn.neighbors import KNeighborsRegressor
from sklearn.svm import SVR
from sklearn.ensemble import RandomForestRegressor, GradientBoostingRegressor
from sklearn.metrics import mean_absolute_error, mean_squared_error, r2_score

import warnings
warnings.filterwarnings('ignore')

"""# Data Loading"""

import kagglehub

# Download latest version
path = kagglehub.dataset_download("harishkumardatalab/housing-price-prediction")

print("Path to dataset files:", path)

# loding data
data = pd.read_csv(path + '/Housing.csv')
data.head()

"""# EDA

## EDA - Deskripsi Variabel
"""

# mengecek informasi pada dataset
data.info()

data.describe()

"""## EDA - Data Cleaning"""

# Drop kolom yang tidak digunakan Price (USD)
# data.drop(columns=['Price(USD)'], inplace=True)

data.info()

# Cek missing value
data.isnull().sum()

# Mengecek duplikasi data
data.duplicated().sum()

# Mengecek outlier data numerik
# Mengubah layout agar sesuai dengan jumlah kolom pada DataFrame
data.plot(kind='box', subplots=True, layout=(2,3), figsize=(15,10))
plt.tight_layout()
plt.show()

# Tabel outlier

# Calculate outliers using IQR
numeric_cols = data.select_dtypes(include=np.number).columns
outlier_data = []

for col in numeric_cols:
    Q1 = data[col].quantile(0.25)
    Q3 = data[col].quantile(0.75)
    IQR = Q3 - Q1

    lower_bound = Q1 - 1.5 * IQR
    upper_bound = Q3 + 1.5 * IQR

    outliers = data[(data[col] < lower_bound) | (data[col] > upper_bound)]

    outlier_data.append({
        'Feature': col,
        'Lower Bound (IQR)': lower_bound,
        'Upper Bound (IQR)': upper_bound,
        'Number of Outliers': len(outliers),
        'Percentage of Outliers': (len(outliers) / len(data)) * 100
    })

outlier_df = pd.DataFrame(outlier_data)
print("Outlier Analysis using IQR:")
outlier_df

# Mengecek data outlier stories
data[data['stories'] > 3.5]

# Mengecek data outlier price
data[data['price'] > 9205000]

# Mengecek data outlier area
data[data['area'] > 10500]

"""## EDA - Univariate Analysis"""

# pembagian numerical features dan categorical features
numerical_features = ['price','area', 'bedrooms', 'bathrooms', 'stories', 'parking']
categorical_features = ['mainroad', 'guestroom', 'basement', 'hotwaterheating', 'airconditioning', 'prefarea', 'furnishingstatus']

"""### Kategorikal"""

# Fitur mainroad

feature = categorical_features[0]
count = data[feature].value_counts()
percent = 100 * data[feature].value_counts(normalize=True)
df_summary = pd.DataFrame({'jumlah sampel': count, 'persentase': percent.round(1)})
print(f"\nFitur: {feature}")
print(df_summary, '\n')
count.plot(kind='bar')
plt.show()

# Fitur guestroom

feature = categorical_features[1]
count = data[feature].value_counts()
percent = 100 * data[feature].value_counts(normalize=True)
df_summary = pd.DataFrame({'jumlah sampel': count, 'persentase': percent.round(1)})
print(f"\nFitur: {feature}")
print(df_summary)
count.plot(kind='bar', title=feature)
plt.show()

# Fitur basement

feature = categorical_features[2]
count = data[feature].value_counts()
percent = 100 * data[feature].value_counts(normalize=True)
df_summary = pd.DataFrame({'jumlah sampel': count, 'persentase': percent.round(1)})
print(f"\nFitur: {feature}")
print(df_summary)
count.plot(kind='bar', title=feature)
plt.show()

# Fitur hotwaterheating

feature = categorical_features[3]
count = data[feature].value_counts()
percent = 100 * data[feature].value_counts(normalize=True)
df_summary = pd.DataFrame({'jumlah sampel': count, 'persentase': percent.round(1)})
print(f"\nFitur: {feature}")
print(df_summary)
count.plot(kind='bar', title=feature)
plt.show()

# Fitur airconditioning

feature = categorical_features[4]
count = data[feature].value_counts()
percent = 100 * data[feature].value_counts(normalize=True)
df_summary = pd.DataFrame({'jumlah sampel': count, 'persentase': percent.round(1)})
print(f"\nFitur: {feature}")
print(df_summary)
count.plot(kind='bar', title=feature)
plt.show()

# Fitur prefarea

feature = categorical_features[5]
count = data[feature].value_counts()
percent = 100 * data[feature].value_counts(normalize=True)
df_summary = pd.DataFrame({'jumlah sampel': count, 'persentase': percent.round(1)})
print(f"\nFitur: {feature}")
print(df_summary)
count.plot(kind='bar', title=feature)
plt.show()

# Fitur furnishingstatus

feature = categorical_features[6]
count = data[feature].value_counts()
percent = 100 * data[feature].value_counts(normalize=True)
df_summary = pd.DataFrame({'jumlah sampel': count, 'persentase': percent.round(1)})
print(f"\nFitur: {feature}")
print(df_summary)
count.plot(kind='bar', title=feature)
plt.show()

# univariate analysisis Fitur kategorikal
n_features = len(categorical_features)
n_cols = 2
n_rows = math.ceil(n_features / n_cols)

fig, axes = plt.subplots(n_rows, n_cols, figsize=(12, 4 * n_rows))
axes = axes.flatten()

for i, feature in enumerate(categorical_features):
    count = data[feature].value_counts()
    percent = 100 * data[feature].value_counts(normalize=True)
    df_summary = pd.DataFrame({'jumlah sampel': count, 'persentase': percent.round(1)})

    ax = axes[i]
    count.plot(kind='bar', ax=ax)
    ax.set_ylabel("Jumlah")
    ax.set_xlabel(feature)

# Jika jumlah plot tidak genap, hilangkan axis yang kosong
for j in range(i+1, len(axes)):
    fig.delaxes(axes[j])

plt.tight_layout()
plt.show()

"""### Numerik"""

# Analisis Fitur Numerik
data[numerical_features].hist(bins=50, figsize=(20, 15))
plt.show()

"""## EDA - Multivariate Analysis"""

# Mengecek rata-rata harga terhadap masing-masing fitur kategori
cat_features = categorical_features

for col in cat_features:
    sns.catplot(x=col, y="price", kind="bar", dodge=False, height = 4, aspect = 3,  data=data, palette="Set3")
    plt.title(f"Rata-rata Harga Relatif terhadap Fitur: {col}")
    plt.ylabel("Rata-rata Harga Rumah")
    plt.xlabel(col)
    plt.show()

# Mengamati hubungan antar fitur numerik dengan fungsi pairplot()
sns.pairplot(data[numerical_features])
plt.show()

plt.figure(figsize=(10, 10))
correlation_matrix = data[numerical_features].corr().round(2)

sns.heatmap(
    data=correlation_matrix,
    annot=True,
    cmap='coolwarm',
    linewidths=0.5
)
plt.title("Correlation Matrix", size=16)
plt.show()

"""# Data Preparation"""

# Label encoding untuk fitur biner
binary_cols = ['mainroad', 'guestroom', 'basement', 'hotwaterheating', 'airconditioning', 'prefarea']
le = LabelEncoder()
for col in binary_cols:
    data[col] = le.fit_transform(data[col])

# Ordinal encoding untuk furnishingstatus
furnish_map = {
    'furnished': 1,
    'semi-furnished': 2,
    'unfurnished': 3
}
data['furnishingstatus'] = data['furnishingstatus'].map(furnish_map)

data.head()

# Pembagian Dataset Train Test
from sklearn.model_selection import train_test_split

# Pemisahan fitur target
X = data.drop(columns=['price'])
y = data['price']

# Pembagian data
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Scaling
scaler = MinMaxScaler()
X_train_scaled = scaler.fit_transform(X_train)
X_test_scaled = scaler.transform(X_test)

data.info()

data.head()

"""# Modeling"""

# Inisialisasi model
models = {
    "Linear Regression": LinearRegression(),
    "KNN Regressor": KNeighborsRegressor(n_neighbors=5),
    "SVR (RBF Kernel)": SVR(kernel='rbf', C=100, gamma=0.1, epsilon=.1),
    "Random Forest": RandomForestRegressor(n_estimators=100, random_state=42),
    "Gradient Boosting": GradientBoostingRegressor(n_estimators=100, learning_rate=0.1, random_state=42)
}

"""# Evaluasi Model"""

# Evaluasi model
results = {}

for name, model in models.items():
    model.fit(X_train_scaled, y_train)
    y_pred = model.predict(X_test_scaled)

    mae = mean_absolute_error(y_test, y_pred)
    rmse = np.sqrt(mean_squared_error(y_test, y_pred))
    r2 = r2_score(y_test, y_pred)

    results[name] = {
        "MAE": mae,
        "RMSE": rmse,
        "R2 Score": r2
    }

# Tampilkan hasil evaluasi
pd.DataFrame(results).T.sort_values(by="R2 Score", ascending=False)

import matplotlib.pyplot as plt
import seaborn as sns

plt.figure(figsize=(16, 12))

for i, (name, model) in enumerate(models.items(), 1):
    y_pred = model.predict(X_test_scaled)
    plt.subplot(3, 2, i)
    sns.scatterplot(x=y_test, y=y_pred)
    plt.plot([y_test.min(), y_test.max()], [y_test.min(), y_test.max()], 'r--')  # garis ideal y=x
    plt.xlabel('Actual Price')
    plt.ylabel('Predicted Price')
    plt.title(f'Actual vs Predicted Prices: {name}')
    plt.tight_layout()

plt.show()